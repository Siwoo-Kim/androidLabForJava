
SDK?
    Software Development Kit - 안드로이드 개발을 위한 개발 도구
SDK 버전?
    앱에서 지원하는 기기에 호환되는 SDK 버전
    Minimum SDK version
    ex) Phone And Tablet: API 15 - 최소 SDK 15버전의 휴대폰과 태블릿 기종을 위한 앱

Activity?
    화면을 제공하는 안드로이드 구성요소

AVD?
    Android Virtual Device 혹은 Emulator - 테스트용 가상 기기
    * 가상 기기의 하드웨어 가속 기능(Intel x86 Emulator Accelerator)을 위한 설정
        - https://www.jetbrains.com/help/idea/building-and-running-the-application.html

SDK Manager?
    SDK 라이브러리와 각종 도구를 관리

Android 특징?
    1.리눅스 기바
    2.Java or Kotlin을 이용한 앱 개발
    3.오픈소스
    4.Fragmentation[단점] - 다양한 업체들의 개발에 의한 기기의 파편화. 에러 혹은 다른 결과를 초래.

Android 아키텍쳐.
    1 LAYER - Linux Kernel
    2 LAYER - HAL (Hardware Abstraction Layer)
        - 하드웨어(카메라, 블루트스) 기능을 위한 자바 표준 인터페이스를 제공.
    3 LAYER - Android Runtime(ART)
        - ART 가상 머신은 개발 앱의 실행 환경을 제공

안드로이드 런타임(ART)
    자바는 런타임 때 JVM이 자바 코드를 수행하지만, 안드로이드은 VM인 ART을 이용해 수행.
    자바 코드 -> DEX Compiler가 .dex 실행파일 생성 -> ART가 .dex을 실행

컴포넌트?
    컴포넌트는 앱의 구성 단위이며, 여러 개의 컴포넌트가 조합되어 하나의 앱을 구성.
    일반 자바 클래스와 달리 컴포넌트는 안드로이드가 생명 주기를 관리.

어플리케이션 라이브러리
    다른 앱에서 실행 혹은 참조 가능한 컴포넌트의 조합 모음.

    *정리
        1.안드로이드는 컴포넌트 기반의 개발 방식을 채택한다.
        2.각 컴포넌트는 독립적이며 개발자 코드 간의 결합이 발생하지 않는다.
        3.컴포넌트의 생명주기는 시스템이 관리하고 앱 수행 시점은 다양할 수 있다.
        4.어플리케이션 라이브러리 개념에 의해 한 앱에서 다른 라이브러리를 사용할 수 있다.

컴포넌트의 종류
    Activity
        - UI를 구성하기 위한 컴포넌트
        - 사용자 화면을 제공
    Service
        - UI 없이 백그라운드에서 수행되는 컴포넌트
    ContentProvider
        - 앱 간 데이터를 공유하기 위한 컴포넌트
        ex) 카카오톡에서 주소록 앱을 통해 주소를 가져온다
    BroadcastReceiver
        - 이벤트 모델로 수행되는 컴포넌트
        ex) Youtube에서 배터리 부족한 이벤트를 받고 알림을 띄운다.

리소스?
    정적인 파일을 XML로 외부화

개발 디렉토리 구조.
    src/main - 개발자와 관련된 모듈의 시작점
    src/main/AndroidManifest.xml
        - 앱의 메인 환경 설정 파일.
    src/main/java/패키지/MainActivity.java
        - 화면 구성을 위한 Activity로 실제로 이 파일이 수행되어 UI가 출력.
    res
        - 앱의 모든 리소스 파일 디렉토리
    res/drawable
        - 앱의 이미지 파일
    res/layout
        - UI 구성을 위한 레이아웃 XML 파일
     res/mipmap
        - 앱의 아이콘 이미지
     res/values
        - 문자열 값

R.java
    안드로이드 툴에 의해 자동으로 생성되며, R을 통해 리소스를 참조한다.
    ex) R.drawable.ic_message -> res/drawable/ic_message.png

그레이들?
    안드로이드의 빌드(build) 도구

프로젝트 수준의 build.gradle
    - 전체 프로젝트를 위한 설정.

모듈 수준의 build.gradle
    - src 폴더에 위치
    android.compileSdkVersion
        - 사용하는 컴파일러 버전
    android.applicationId
        - 앱의 식별자
    android.minSdkVersion
        - SDK 최소 지원 버전
    android.targetSdkVersion
        - 사용하고 있는 SDK 버전
    android.versionCode
        - 현재 프로젝트 앱의 버전
    dependencies
        - 앱의 의존 라이브러리

AndroidManifest.xml
    - 앱의 메인 환경 설정 파일.
    manifest.package
        - 앱의 식별자
    application
        - 앱의 구성 요소를 등록을 위한 태그
        - 모든 컴포넌트 클래스는 application 하위 태그에 등록
    application:icon
        - 앱의 아이콘 이미지
    application:label
        - 앱의 이름
        ex) <application android:icon="@mipmap/ic_launcher" ... />
            @mipmap/ic_launcher 는 R.mipmap.ic_launcher와 동일
            @ = R = res 디렉토리
    activity
        - 앱의 Activity 컴포넌트 등록
        ex) <activity android:name=".MainActivity />
    activity.name
        - 등록하고자 하는 Java 클래스명을 명시

MainActivity.java
    - 사용자가 앱을 실행시 호출되는 화면 구성을 위한 Activity
    - AppCompatActivity을 상속하며 AppCompatActivity는 Activity를 상속.
    MainActivity.onCreate(Bundle savedInstanceState)
        - 액티비티가 실행시 호출되는 메서드
    MainActivity.setContentView()
        - 화면 출력 함수



UI 액티비티-뷰 구조
액티비티?
뷰?
setContentView(View view)
setContentView(int layoutResID)

두가지 UI 작성법?
LinearLayout
레이아웃 XML?
Launcher Activity?
<LinearLayout>?
<Button>?

뷰 태그의 속성?(뷰 태그 == 뷰)
TextView?
id 속성?
R.id
findViewById

layout_width, layout_height?
    match_parent
    fill_content
    wrap_content
    100px
    margin
    padding

margin, padding - dp

clickable
TextView, ImageView의 clickable 속성

visibility
    true, invisible, gone
    invisible과 gone의 차이

setVisibility()

View.OnClickListener?

뷰의 계층구조
View?
ViewGroup?
TextView?

레이아웃 XML로 계층구조 구현 방법?
자바 코드로 계층구조 구현 방법?

뷰 클래스
    TextView?
        android:text?
        android:typeface?
        setTypeFace()?
        android:textStyle?
        android:textColor?
        android:textSize?
        android:autoLink? *
        maxLines?
        ellipsize?

    ImageView?
        android:src
        android:maxWidth, android:maxHeight
        android:adjustViewBounds?
        android:tint?

    EditText?
        android:lines?
        android:maxLines?
        android:inputType?
        android:text?
        android:textMultiLine
        android:gravity

    Button?
        Checkbox extends CompoundButton?
            isChecked()
            setChecked(boolean)
            toggle()
            setOnCheckedChangeListener(OnCheckedChangeListener)
        RadioButton extends CompoundButton?
            RadioGroup?

assets 폴더?
strings.xml?
res/drawable


UI 액티비티-뷰 구조
액티비티?
	안드로이드 컴포넌트(Activity, Service, ContentProvider, BroadcastReciever)들 중 하나로써, 화면 출력을 담당한다.
뷰?
	다양한 화면의 내용물(UI)을 추상화한 클래스.

setContentView(View view)
setContentView(int layoutResID)
	액티비티에서 뷰를 추가

두가지 UI 작성법?
	자바 코드와 Layout XML

LinearLayout
	뷰를 순서대로 가로 혹은 세로로 정렬하는 Container (ViewGroup)
Layout XML?
	뷰를 XML 파일로 정의, /res/layout 디렉토리에 저장.

Launcher Activity?
	해당 액티비티를 다른 Activity와 별개로 독립적으로 실행.


뷰 태그의 속성?
	뷰 태그에 다양한 속성을 추가할 수 있으며, 이 속성들을 이용하여 뷰를 정의, 설정한다.

	*TextView?
		화면에 문자열을 출력하는 뷰.

	id 속성?
		뷰의 식별자를 부여. 자바 코드에서 참조 가능.
		R.id?
			android:id="@+id/[name]" 속성으로 부여된 id 값은 R.java에 클래스에 등록된다.

		findViewById(int id)
			뷰의 식별자를 이용하여 뷰 객체를 리턴.


layout_width, layout_height?
	뷰의 가로(layout_width), 세로(layout_height) 크기를 지정.
    match_parent, fill_content
	해당 뷰가 부모 뷰의 크기를 모두 차지.
    wrap_content
	해당 뷰의 크기를 적절하게 계산해서 결정. ex) TextView는 폰트 크기와 갯수에 영향을 받는다.
    100px
	해당 뷰의 크기를 px로 지정

margin
	layout_marginLeft, layout_marginRight, layout_marginTop, layout_marginBottom
	여러 뷰 간의 간격을 지정.
padding
	layout_paddingLeft,layout_paddingRight, layout_paddingTop, layout_paddingBottom,
	하나의 뷰의 테두리(변)과 내용과의 간격을 지정.


clickable
	TextView, ImageView의 clickable 속성

visibility
    true, invisible, gone
	-뷰의 가시성을 제어.
	invisible과 gone의 차이?
		-둘 다 가시성을 잃지만, invisible은 화면을 차지하고 gone은 화면의 차지 공간을 잃는다.
setVisibility(int visible)
	자바 코드에서 뷰의 가시성을 제어

View.OnClickListener?

뷰의 계층구조
	뷰는 뷰 객체 간의 계층을 이룬다.
View?
	뷰 클래스의 최상위 클래스.
ViewGroup?
	뷰 클래스의 자식 클래스로 Container 역할을 담당한다. Layout 클래스들의 부모 클래스.
TextView?
	지정한 문자열을 출력하는 View 클래스

레이아웃 XML로 계층구조 구현 방법?
	태그의 상하 관계를 이용.

자바 코드로 계층구조 구현 방법?
	Activity.addView(View view)

뷰 클래스
    TextView?
        android:text?
		    -화면에 출력할 문자열을 지정.
        android:typeface?
		    normal(default), sans, serif, monospace
		    -문자열의 폰트를 지정.
        TextView.setTypeFace(Typeface typeface)?
		    -자바 코드에서 임의의 폰트를 지정.
        android:textStyle?
		normal(default), bold, italic
		    -문자열 효과를 지정
        android:textColor?
        android:textSize?
        android:autoLink? *
		web|email|phone
		    -문자열을 parsing해 특정 형태의 맞는 link로 처리.
        maxLines?
		    -화면에 출력할 최대 라인을 지정.
        ellipsize?
            -maxLines로 지정된 최대 라인을 문자열이 초과시 생략하고 줄임 표시(..) 추가.

    ImageView?
        android:src
        android:maxWidth, android:maxHeight
        android:adjustViewBounds?
        android:tint?

    EditText?
        android:lines?
        android:maxLines?
        android:inputType?
        android:text?
        android:textMultiLine
        android:gravity

    Button?
        Checkbox extends CompoundButton?
            isChecked()
            setChecked(boolean)
            toggle()
            setOnCheckedChangeListener(OnCheckedChangeListener)
        RadioButton extends CompoundButton?
            RadioGroup?

assets 폴더?
strings.xml?
res/drawable



TableLayout?
    TableRow?
    android:shrinkColumns
    android:stretchColumns
    android:layout_column
    android:layout_span

GridLayout?
    columnCount, rowCount
    orientation 속성과 columnCount, rowCount 의 관계
    layout_column
    layout_row
    layout_columnSpan
    layout_rowSpa
    layout_gravity

ConstraintLayout?
    가로축?
    세로축?
    app:layout_constraint[뷰적용변]_to[상대뷰적용변]Of
    app:layout_constraintLeft_toLeftOf
    app:layout_constraintLeft_toRightOf?
    app:layout_constraintBottom_toBottomOf?

    app:layout_constraint 을 이용해 뷰를 부모 뷰 정중앙에 위치시켜라.

    android:layout_margin[위치]?
    app:layout_goneMargin[위치]?
        상대 뷰의 visibility 가 gone 이고 android:layout_marginLeft=10dp, android:layout_goneMarginLeft 가 설정되어 있지 않다면 해당 뷰의 Left Margin 값은?
        상대 뷰의 visibility 가 gone 이고 android:layout_marginLeft=10dp, android:layout_goneMarginLeft=15dp 라면 해당 뷰의 Left Margin 값은?

    bias?
        layout_constraintHorizontal_bias, layout_constraintVertical_bias

    ratio?
        constraintDimensionRatio
        [Width:Height]
        W,H?


진동과 소리
진동
    진동을 울리려면 Permission 설정이 되어야 한다.
    퍼미션?
        AndroidManifest.xml?
            Permission 은 앱의 메인 환경파일인 AndroidManifest.xml 에서 설정해야 한다.
        <user-permission android:name="android.permission.VIBRATE" />?
           AndroidManifest.xml 에 VIBRATE 퍼미션을 설정한다.
        Vibrator?
            - Vibrator 는 SystemService 중 하나이다.
            getSystemService(VIBRATOR_SERVICE);
                - Vibrator 객체를 획득한다.
                 SystemService?
                    SystemService 은 시스템 레벨의 서비스 이다. 서비스는 안드로이드 4가지 컴포넌트 중 하나이다.
                    getSystemService() 라는 함수를 통해 SystemService 을 획득할 수 있다.
                    시스템 서비스로는 LayoutInflater, LocationManager, TelephonyManager 등이 있다.

            Vibrator.vibrate(long[] pattern, int repeat)
                - 진동을 울린다.
                long 배열의 홀수 번째? long 배열의 짝수 번째?
                    - 배열의 홀수번째는 대기시간, 짝수번째는 진동시간.
                int repeat 값 0, int repeat 값 -1?
                    - 0은 cancel 할 때까지 무한 반복되고, -1 은 한 번만 진동이 울린다.
                    ex) Vibrator.vibrate(new long[]{500, 1000, 500, 1000}, -1);
                    - 0.5 초 대기, 1 초 진동, 0.5 초 대기, 1 초 진동 반복을 한번을 반복한다.
                vibrate 와 cancel()?
                    - int repeat 을 0으로 설정하여 무한 반복시, cancel() 함수를 호출하여 진동을 멈출 수 있다.

소리
    시스템 효과음 중에 하나는 beep 이다. beep 는 '짧은 알림음', '경적' 등을 나타낸다.
    안드로이드에서는 스마트폰에 내장된 기본 효과음 (간단한 알림, 알람, 전화 수신음) 을 제공한다.
    ex) RingtoneManager.TYPE_NOTIFICATION

    시스템 효과음?
        시스템 효과음은 Uri 타입을 이용하여 획득하며 종류에는 ALARM, NOTIFICATION, RINGTONE 이 있다.
        Uri?
            스마트폰에 등록된 효과음의 식별자를 얻을 때 Uri 타입을 이용한다.
        RingtoneManager 의 getDefaultUri(int Type)
        RingtoneManager.play()
            효과음을 재생한다.
        ex) Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.Type_NOTIFICATION);
            Ringtone ringtone = RingtoneManager.getRingtone(getApplicationContext(), notification);
            ringtone.play();

    커스텀 효과음?
        MediaPlayer?
            직접 녹음한 효과음은 MediaPlayer 을 이용하여 재생한다.
        MediaPlayer player = MediaPlayer.create(this, R.raw.fallbackring);

다이얼로그 (Dialog)?
    - 다이얼로그는 다양한 상황을 알리기 위해 사용한다. 다이얼로그의 종류에는 모들(Modal)과 모달리스(Modeless)가 있다.
    모달?
        - 모달은 모달이 닫히기 전까지 메인 창(모달을 호출한 창)을 사용할 수 없다.
    모달리스?
        - 모달리스는 모달리스의 존재 여부에 상관없이 메인 창을 사용할 수 있따.

    모달리스
        토스트?
            토스트는 시간이 지나면 자동으로 사라지는 창이다.

            makeText(Context context, int resId, int duration)?
            makeText(Context context, CharSequence text, int duration)?
                makeText 함수를 이용하여 토스트를 생성한다.
                int duration?
                    int duration 은 Toast 에 상수로 정의되어 있다.
                    LENGTH_SHORT 은 3초 , LENGTH_LONG 은 5초
            Toast.setDuration(int duration)?
            Toast.setText(int resId)?
            Toast.setView(View view)?
            Toast.setGravity(int gravity, int xOffset, int yOffset)?
            Toast.setMargin(float horizontalMargin, float verticalMargin)?
            Toast.show()?
                - 토스트를 보여준다.

    모달
        AlertDialog?
            안드로이드의 가장 기본적인 다이얼로그.
            Dialog 는 타이틀, 본문, 버튼 영역으로 나누어져 있다.
            타이틀과 버튼 영역은 생략할 수 있다.
            AlertDialog 클래스는 AlertDialog 의 Builder 클래스를 이용하여 생성한다.

            AlertDialog 의 화면 구조?
                타이틀, 본문, 버튼 영역.
                타이틀 영역은 아이콘 이미지와 문자열로 이루어진다.
                버튼 영역은 여러 버튼으로 이루어진다.

            AlertDialog.Builder(Context context)?
                AlertDialog.Builder?
                    - AlertDialog 인스턴스를 생성하고 리턴한다.
                    AlertDialog.Builder.setIcon(int iconId)?
                        - 타이틀 영역의 아이콘을 지정.
                    AlertDialog.Builder.setTitle(CharSequence title)?
                        - 타이틀 영역의 문자열을 지정한다.
                    AlertDialog.Builder.setMessage(CharSequence message)?
                        - 본문 영역의 문자열을 지정한다.

                    버튼 영역 설정.
                        - 버튼은 positive, negative, neutral 등 총 3개까지 지정할 수 있다.
                        - 버튼은 같은 성격의 버튼 중복 추가를 허용하지 않는다.

                        DialogInterface.OnClickListener.onClick(DialogInterface dialog, int which)
                            - which 은 클릭된 버튼의 종류를 의미한다.
                    AlertDialog.Builder.setPositiveButton(CharSequence text, DialogInterface.OnClickListener listener)?
                        - 버튼 영역의 버튼을 추가한다. 같은 성격의 중복을 허용하지 않는다.
                    AlertDialog.Builder.setNegativeButton(CharSequence text, DialogInterface.OnClickListener listener)?
                        - 버튼 영역의 버튼을 추가한다. 같은 성격의 중복을 허용하지 않는다.
                    AlertDialog.Builder.setNeutralButton(CharSequence text, DialogInterface.OnClickListener listener)?
                        - 버튼 영역의 버튼을 지정한다. 같은 성격의 중복을 허용하지 않는다.
                    AlertDialog.Builder.create()?
                        - Dialog 의 인스턴스를 생성한다.
                AlertDialog.show()?
                        - 생성된 다이얼로그를 화면에 출력한다.
                AlertDialog.setCancelable(boolean cancelable)?
                        - 뒤로가기 버튼, Dialog 밖 영역을 터치시 닫히는 것을 방지한다.

        목록과 AlertDialog?
            - AlertDialog 을 이용하여 목록 형식을 띄울 수 있다.
            AlertDialog.Builder.setItems(int itemsId, DialogInterface.OnClickListener listener)?
                - res/values 에 정의된 배열[배열 리소스]을 가져와 목록을 구성한다.
            AlertDialog.Builder.setItems(CharSequence[] items, DialogInterface.OnClickListener listener)?
                - 인자로 넘긴 문자열 배열을 이용하여 목록을 구성한다.
                * DialogInterface.OnClickListener.onClick(DialogInterface dialog, int which)?
                    - 항목 선택 이벤트의 핸들러. 두 번째 which 은 선택된 목록 항목의 인덱스이다.

            목록과 checkbox, radio 버튼?
                - 목록 형식을 checkbox 혹은 radio 버튼으로 구성할 수 있다.
                  setMultiChoiceItems 은 checkbox 이며, radio 은 setSingleItems 은 radio 버튼이다.
                  AlertDialog 의 checkbox?
                        AlertDialog.Builder.setMultiChoiceItems(CharSequence[] items, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener)?
                        AlertDialog.Builder.setMultiChoiceItems(int itemsId, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener)?
                            - 첫 번째 인자는 항목 구성을 위한 배열 리소스, 혹은 배열이다.
                            - 두 번째 인자는 초기 체크박스의 체크 상태 값이다.
                  AlertDialog 의 radio?
                        AlertDialog.Builder.setSingleItems(CharSequence[] items, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener)?
                        AlertDialog.Builder.setSingleItems(int itemsId, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener)?
                            - 첫 번째 인자는 항목 구성을 위한 배열 리소스, 혹은 배열이다.
                            - 두 번째는 초기의 체크 선택 항목이다.

        ProgressDialog extends AlertDialog?
            - 진행 상태를 보여주는 다이얼로그이다. 막대(ProgressDialog.STYLE_HORIZONTAL) 혹은 원(default)의 종류가 있다.
            ProgressDialog.setProgressStyle
                ex) ProgressDialog.STYLE_HORIZONTAL
                ProgressDialog.setIndeterminate(boolean indeterminate)?
                    - 막대 모양의 ProgressDialog 일 시, 특정 값이 아닌 계속 진행 상태를 보여준다.
                ProgressDialog.setProgressNumberFormat(String format)?
                ProgressDialog.setProgressPercentFormat(NumberFormat format)?

         DatePickerDialog?
            - 날짜 선택을 위한 Dialog
            DatePickerDialog(Context context, Listener.onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth), year, month, day);
         TimePickerDialog?
            - 시간 선택을 위한 Dialog
         9999   TimePickerDialog(Context context, Listener.onTimeSet(TimePicker view, int hourOfDay, int minute), hour, minute, boolean 24hours)
               - 마지막 인자는 24시간 쳬계의 설정 여부. true 은 24시간 체계, false 은 12시간 체계
         커스텀 다이얼로그?
            - 개발자가 직접 화면을 구성한 커스텀 다이얼로그.
                LayoutInflater?
                    SystemService 중 하나로 Layout XML 파일을 초기환 한 후 뷰를 생성한다.
                AlertDialog.Builder.setView(View view)
                    LayoutInflater.inflate() 로 생성된 view 를 인자로 받아 다이얼로그 인스턴스를 생성한다.

이벤트
	- 이벤트는 사용자와의 상호작용 메커니즘을 지원한다.
    이벤트의 종류
        Delegation Event Model, Hierarchy Event Model

        Delegation Event Model?
		- Delegation Event Model 은 뷰에서 발생하는 이벤트를 처리하기 위한 모델이다.

            Delegation 이벤트 구조
		- Delegation Event Model 은 Event Source(View), Event Handler(콜백 함수) 그리고 Event Listener(옵저버 Interface)로 구성되어 있다.
		- Event Source 와 Event Handler 를 Listener 로 연결하여 이벤트를 처리한다.
                Event Source    >   Listener    > EventHandler

                Event Source?
			- 이벤트가 발생한 뷰 객체
                Event Handler?
			- 이벤트를 처리하는 익명 객체 혹은 Callback
                Listener?
			- Event Source 와 Event Handler 를 연결하는 Interface

                setOn[EventName]Listener() 함수?
			- 이벤트 소스와 이벤트 핸들러를 연결하는 함수.
                On[EventName]Listener 인터페이스?
			- 이벤트의 Listener 을 의미하며, 이벤트 핸들러에게 처리 로직을 Delegation 한다.
                옵저버 패턴과 Delegation Event Model?
                    - 두 패턴 모두 처리 로직을 위임하는 추상 함수을 이용한다.

            이벤트의 종류
                - 안드로이드는 View 의 클릭 이벤트와 뷰에 따라 다양한 이벤트를 제공.
                OnClickListener?
                    - 뷰 클릭 시 발생하는 이벤트
                OnLongClickListener?
                    - 뷰를 오래 클릭 시 발생하는 이벤트
                OnCheckedChangeListener?
                    - Checkbox 의 상태 변경 이벤트
                OnItemClickListener?
                    - ListView 의 항목 선택 이벤트
                OnDateSetListener?
                    - DatePicker 의 날짜 선택 이벤트
                OnTimeSetListener?
                    - TimePicker 의 시간 선택 이벤트

                    ex) View.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                ... 이벤트 처리 로직
                             }
                        }

        Hierarchy Event Model?
            - 액티비트에서 발생하는 이벤트(KeyEvent, TouchEvent) 를 처리하기 위한 모델
            이벤트 처리를 위해 Activity 의 메서드를 재정의 하여 처리 로직을 구현한다.
		    - Hierarchy Event Model 은 액티비티에서 발생하는 이벤트(Touch, Key).

            Hierarchy 이벤트 구조?
                - Activity 의 이벤트 메서드를 재정의한다.

            터치 이벤트(MotionEvent)?
                - 사용자가 손가락으로 조작하여 상호작용함을 의미한다.

                Activity.OnTouchEvent(MotionEvent motionEvent)?
                    - 터치 이벤트가 발생시의 콜백(Callback) 함수
                    터치 이벤트(MotionEvent) 타입?
                        - ACTION_DOWN, ACTION_UP, ACTION_MOVE
                        ACTION_DOWN
                            - 화면이 터치된 순간의 이벤트
                        ACTION_UP
                            - 화면에서 터치를 떼는 순간의 이벤트.
                        ACTION_DOWN
                            - 터치한 후 이동하는 순간의 이벤트.

                    getX(), getY(), getRawX(), getRawY()?
                        - 터치 이벤트가 발생한 지점의 x, y 좌표.
                        getX(), getY() 와 getRawX(), getRawY() 의 차이?
                            - get() 은 뷰 내에서의 좌표를, getRaw() 은 액티비티(화면) 에서의 좌표.

            키 이벤트(KeyEvent)?
                - 스마트폰의 키가 눌렀을 때의 상호작용을 의미한다.

                소프트 키보드(Soft Keyboard)?
                    - 화면에서 올라오는 keyboard, Android 앱에서는 이벤트로 처리되지 않는다.
                소프트 키보드 이외의 키 이벤트?
                    - 시스템 수준의 이벤트를 의미한다. ex) 뒤로가기, 홈, 오버뷰 버튼.

                Activity.onKeyDown(int keycode, KeyEvent keyEvent)?
                    - 키가 눌린 순간의 이벤트
                Activity.onKeyUp(int keycode, KeyEvent keyEvent)?
                    - 키를 떼는 순간의 이벤트
                Activity.onKeyLongPress(int keycode, KeyEvent keyEvent)?
                    - 키를 오래 누르는 순간의 이벤트

                    * int keyCode 는 눌러진 키 버튼을 의미하고 이를 이용하여 눌러진 키를 구별할 수 있다.


Resource?
    Resource 종류?
        drawable?
        layout?
        values?
        menu?
        xml?
        anim?
        raw?
        mipmap?

    애니메이션 Resource?
        애니메이션 리소스 폴더?
        애니메이션 리소스 태그?
            <set>?
            <scale>?
                fromXScale?
                toXScale?
                fromYScale?
                toYScale?
                pivotX?
                pivotY?
            <rotate>?
                fromDegrees?
                toDegrees?
                pivotX?
                pivotY?
            <alpha>?
                fromAlpha?
                toAlpha?
            <translate>?
                fromXDelta?
                toXDelta?
                fromYDelta?
                toYDelta?


            리소스 태그 공통 속성?
                duration?
                startOffset?
                repeatCount?
                repeatMode?

        애니메이션 활용
            Animation?
            AnimationUtils.loadAnimation(Context context, int resourceId)?
            View.startAnimation(Animation animation)?
            Animation.setAnimationListener(AnimationListener listener)?
            Animation.setFillAfter(boolean fillAfter)?

    값(values) Resource?
        권장 폴더명
            strings.xml?
            colors.xml?
            styles.xml?
            arrays.xml?
            dimens.xml?

        값 태그?
            <dimen>?
            <color>?
            <style>?
                <item>?
                스타일 상속?
                테마(Theme)?
                    colorPrimary?
                    textColorPrimary?
                    colorPrimaryDark?
                    windowBackground?
                    navigationBarColor?
                    windowNoTitle?
                    windowActionBar?

                    테마 적용 방법?
                    android:theme?
                    앱 테마와 액티비티 테마?

    스마트폰 크기 호환성?
        mipmap 폴더?
           mipmap 과 기기 환경 조건?
        리소스 폴더명과 대시(-)
            폴더명에 명시할 수 있는 조건?
            폴더명 명시 규칙?
                ex) res/values/values-ko-rKR/strings.xml
                ex) layout/activity_main.xml 과 layout-land/activity_main.xml
        DisplayMetrics?
            widthPixels?
            heightPixels?
            densityDpi?
            density?
            scaleDensity?
            xdi?
            ydpi?
        화면의 단위 크기
            dp(dip)?
            sp(sip)?
            pt(pt)?
            px?
            mm?
            in?
            권장하는 단위?
                유동적인 dp 단위 계산법과 스마트폰 크기


앱 데이터의 영속화
    SQLite?
        - 오픈 소스 관계형 데이터베이스. 서버에서 구동되는 서버가 아닌 어플리케이션의 라이브러리를 이용, 로컬에 데이터를 저장.
        로컬 데이터베이스의 필요성?
            - 모바일의 네트워크는 신뢰성이 낮아 일정 정도 데이터를 로컬 디바이스에 저장해야 된다.
            때문에 로컬 데이터베이스의 중요성은 상대적으로 높은 편.

    SQLiteDatabase?
        - 안드로이드 데이터베이스 핵심 클래스.
        DML, DDL 모두 처리한다.

        Activity.openOrCreateDatabase(String name, int mode, CursorFactory factory)?
            - SQLiteDatabase 객체를 리턴한다. name 은 데이터베이스 파일명.

        SQLiteDatabase.execSQL(String sql, ?String[] bindArgs)?
            - INSERT, UPDATE, DELETE 문을 처리한다.
            SQL 파라미터 ('?')?
                - 가변 인자. 런타임시 SQL 파라미터를 인자의 값으로 바인딩한다.
            SQLiteDatabase.insert(String table, String nullColumnHack, ContentValues values)?
            SQLiteDatabase.update(String table, ContentValues values, String whereClause, String[] whereArgs)?
            SQLiteDatabase.delete(String table, String whereClause, String[] whereArgs)?
        SQLiteDatabase.rawQuery(String sql, String[] electionArgs, Object[] bindArgs)?
            - SELECT (쿼리) 를 처리한다. SQL 파라미터가 없을 시 null 로 대체하라.
            SQLiteDatabase.query(String table, String[] columns, String selections, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)?

            Cursor?
                - 쿼리를 통해 가져온 데이터의 한 행(ROW). 한 행을 표현하며, 여러 열(COLUMNS) 의 값을 가져온다.
                boolean Cursor.moveToNext()?
                    - 순서상 다음 행으로 이동
                Cursor.moveToFirst()?
                    - 가장 첫 번째 행으로 이동.
                Cursor.moveToLast()?
                    - 가장 마지막 행으로 이동.
                Cursor.moveToPrevious()?
                    - 순서상 이전 행으로 이동.
                Cursor.getString(int colNum)?
                    - 지정한 열의 값을 가져온다.

        SQLiteOpenHelper?
            데이터베이스를 관리하는 추상 클래스. 이 클래스를 상속하여 사용한다. ex) 테이블 생성 혹은 스키마 변경.
            SQLiteOpenHelper.onCreate()?
                - 앱이 설치된 이후 SQLiteOpenHelper 을 상속한 클래스가 최초로 이용된 순간 한 번 호출.
            SQLiteOpenHelper.onUpgrade()?
                - 데이터베이스 version 이 변경될 때마다 호출.
            SQLiteDatabase getWritableDatabase()?
                - SQLiteDatabase 객체를 리턴한다.

    Realm?
        - ORM 방식의 데이터 영속화 목적으로 사용하는 로컬 데이터베이스.
        ORM?
            - Object-Relational Mappings. 테이블의 데이터를 해석해 객체에 직접 매핑 자동 지원.
        플러그인 설정?
            - 프로젝트 수준의 그레이들 파일에 의존성을 설정.
        프로젝트 수준의 그레이들?
            - root/build.gradle
        realm 플러그인 추가?
            - root/build.gradle 에 dependencies 에 "classpath: 'io.realm:realm-gradle-plugin:2.2.0'" 추가

        VO와 RealObject?
            Value Object 클래스. Realm 의 ORM 을 위해 RealmObject 를 상속해야 한다.
            Realm 이 자동 해석해 데이터를 테이블에 저장 혹은 저장된 객체를 객체로 맵핑한다.

        Realm 객체?
            Realm.init(Context context)?
                - Initializes the Realm library and creates a default configuration that is ready to use.
                - 앱 구동시 한번만 하면 되는듯..
            Realm.getDefaultInstance()?
                - Realm 객체를 획득한다.

            데이터 저장?
                Realm.executeTransaction(Real.Transaction transaction)?
                    - 데이터 저장. Transaction.execute(Realm realm) 을 구현하여 사용.
                Realm.createObject(Class realmObjectClass)?
                    - Transaction.execute(Realm realm) 에서 저장할 RealmObject 를 생성시 사용.

            데이터 삭제?
                RealmObject.deleteFromRealm()?
                Realm.delete(Class realmObjectClass)?

            쿼리?
                Realm.where()?
                    - RealmQuery 객체를 획득
                RealmQuery.findFirst()?
                RealmQuery.findAll()?
                RealmQuery.findAllSorted(String fieldName)?
                RealmQuery.findAllSorted(String fieldName, Sort sortOrder)?
                RealmQuery.findAllSortied(String[] fieldNames, Sort[] sortOrders)?

                조건절?
                    equalTo()?
                    between()?
                    beginsWith()?
                    endsWith()?
                    isNOtNull()?
                    in()?
                    isNull()?
                    lessThan()?
                    lessThanOrEqualTo()?
                    contains()?
                    like()?

퍼미션?
    - 앱의 접근 권한을 설정하여 자원 보호 및 다른 앱의 접근 권한을 요청.
    앱의 컴포넌트를 보호할 땐 <permission>, <permission> 으로 보호된 앱에 접근하려면 <uses-permission>.

    <users-permission>?
        - 보호된 앱에 접근. AndroidManifest.xml 에 <uses-permission> 으로 등록한다.
            android:name?
                - 접근할 퍼미션의 이름을 지정한다.

    <permission>?
        - 앱의 외부에서의 접근 권한을 설정. <permission> 으로 설정된 앱은 <uses-permission> 이 설정된 앱에서만 접근이 가능하다.
        AndroidManifest.xml 의 permission 태그를 통해 설정한다.

        <permission> 태그의 속성
            android:name?
                - 퍼미션의 이름
            android:label, android:description?
                - 퍼미션에 대한 설명
            android:protectionLevel?
                - 보호 수준을 설정
                    보호 수준 네가지?
                        - normal, dangerous, signature, signatureOrSystem
                        normal?
                            - 낮은 보호 수준. 사용자에게 권한 부여 요청하지 않는다.
                        dangerous?
                            - 높은 보호 수준. 사용자에게 권한 부여 요청한다.
                        signature?
                            - 동일한 키로 서명된 앱만 실행.
                        signatureOrSystem?
                            - 안드로이드 시스템 앱 혹은 동일한 키로 서명된 앱만 실행.

            <permission> 태그의 전역 혹은 컴포넌트 범위?
                - 앱의 전역 범위는 앱 전역적으로 접근 권한을 설정하고, <activity> 태그의 android:permission 속성은 해당 액티비티의 퍼미션을 적용한다.

    시스템 퍼미션?
        - 시스템에 선언된 퍼미션. 특정 기능은 시스템에서 보호하고 있으며,
        퍼미션 허용을 위해 <uses-permission> 태그를 사용하며,
        퍼미션들은 Manifest.permission 에 정의되어 있다.

        퍼미션 그룹?
            - 관련된 시스템 퍼미션을 그룹화.

            퍼미션 그룹 9가지?
                - CALENDAR, CAMERA, CONTACTS, LOCATION, MICROPHONE, PHONE, SENSORS, SMS, STORAGE
                그룹 STORAGE?
                    - 외부 저장서에 대한 퍼미션을 정의한다.
                    - Manifest.permission.READ_EXTERNAL_STORAGE
                    - Manifest.permission.WRITE_EXTERNAL_STORAGE

    안드로이드 6.0
        - 퍼미션 설정 방법에 대한 변화가 적용됬다.
        사용자의 앱의 권한 직접 설정 기능 추가.

            int ContextCompat.checkSelfPermission(Context, String permission)?
                - 현재 앱에 대한 퍼미션의 상태를 확인한다.
                checkSelfPermission 함수의 반환값?
                    PERMISSION_GRANTED?
                        - 퍼미션이 부여된 상태
                    PERMISSION_DENIED?
                        - 퍼미션이 부여되지 않은 상태.
                    * PackageManager.PERMISSION_GRANTED = 0, PackageManager.PERMISSION_DENIED [퍼미션 주어진 상태를 상수로 정의]

            void ActivityCompat.requestPermissions(Activity activity, String[] permissions, int requestCode)?
                - 시스템 Dialog 를 띄워 퍼미션 허용을 요청한다.
                permissions 은 요청할 퍼미션이며, requestCode 은 개발자 임의의 코드이다.
            void Activity.onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)?
                - requestPermission 함수로 띄워진 시스템 Dialog 가 결과값을 유저로부터 받으면 호출되는 함수.
                - permissions 은 요청한 퍼미션, 세번째는 int 배열로 된 결과값.
                    * PackageManager.PERMISSION_GRANTED = 0, PackageManager.PERMISSION_DENIED [퍼미션 주어진 상태를 상수로 정의]

    파일 입출력
        File?
            파일 및 디렉티로리를 추상화한 클래스.
            File File.createTempFile(String prefix, String suffix, String path)?

        FileInputStream?
            File 에서 byte 데이터에 대한 입력 클래스.
        FileOutputStream?
            File 에서 byte 데이터에 대한 출력 클래스.
        FileReader?
            File 에서 String 에 대한 입력 클래스.
        FileWriter?
            File 에서 String 에 대한 출력 클래스.
            외부, 내부 저장 공간?
                - 내부 저장 공간은 어느 기기든 제공하므로 항상 이용할 수 있고 해당 앱 만을 위한 저장 공간. 공유를 허용하지 않는다.
                - 외부 저장 공간은 사용하지 못할 수 있으며, 이를 사용하기 위해 Environment 클래스를 통해 외부 저장 공간의 정보를 얻고 접근 권한을 요청해야 한다.
                - AndroidManifest.xml 에 android.permission.WRITE_EXTERNAL_STORAGE 퍼미션과 android.permission.READ_EXTERNAL_STORAGE 퍼미션이 설정되어 있어야 한다.
                외부 저장 공간?
                    - SD 카드, USB 혹은 내부 저장소에서의 파티션 중 하나일 수 있다. 해당 공간을 이용하려면 퍼미션이 있어야 한다.
                    Environment?
                        - 외부 저장소와 관련된 정보를 가져온다.
                        String Environment.getExternalStorageState()?
                            - 외부 저장 공간 상태
                                Environment.MEDIA_MOUNTED?
                                    - 외부 공간이 제공되는 상태
                                Environment.MEDIA_MOUNTED_READ_ONLY?
                                    - 외부 공간이 읽기 전용인 상태
                        File Environment.getExternalStorageDirectory()?
                            - 외부 저장 공간 경로
                        Environment.getDataDirectory().getAbsolutePath()?
                            - 내부 저장 공간 경로
                        Environment.getExternalStoragePublicDirectory()?
                            - 공용 폴더의 경로를 획득한다.
                            스마트폰 공용 폴더?
                                Environment.DIRECTORY_NOTIFICATIONS?
                                Environment.DIRECTORY_ALARMS?
                                Environment.DIRECTORY_PICTURES?
                                Environment.DIRECTORY_DCIM?
                                Environment.DIRECTORY_DOWNLOADS?
                                Environment.DIRECTORY_MUSIC?
                                Environment.DIRECTORY_MOVIES?


                        외부 저장 공간의 상태?
                            Environment.MEDIA_MOUNTED?
                            Environment.MEDIA_MOUNTED_READ_ONLY?
                        파일 입출력의 퍼미션
                            android.permission.WRITE_EXTERNAL_STORAGE?
                            android.permission.READ_EXTERNAL_STORAGE?
                내부 저장 공간?
                    Activity.getFileDir() ?
                        - 내부 저장 공간의 경로를 획득한다.

    SharedPreferences 와 앱 설정 자동화
        - key-value 의 앱 데이터를 저장. 데이터를 저장하기 위해 내부적으로 xml 파일을 사용한다.
        SharedPreferences?
            - java.io 을 이용하지 않고 SharedPreference 객체를 이용해 데이터 외부화 저장을 지원한다.
            Activity.getPreferences(int mode)?
                - SharedPreferences 객체를 획득한다. 해당 액티비티 이름의 파일에 데이터를 저장한다.
                 다른 액티비티와 데이터를 공유할 수 없다.
            Activity.getSharedPreferences(String name, int mode)?
                - SharedPreferences 객체를 획득한다. String name 으로 파일명에 대한 매개변수를 지정한다.
                다른 액티비티나 컴포넌트에서 데이터를 공유할 수 있다.
            PreferenceManager.getDefaultSharedPreferences(Context context)?
                - 앱의 패키지명을 이용한 파일에 데이터를 저장한다.
                다른 액티비티와 데이터를 공유할 수 있다.
            Context.MODE_PRIVATE?
                - 자기 앱 내에서만 데이터의 공유를 허용한다.

            SharedPreferences.Editor
                - key-value 의 데이터를 저장하기 위한 클래스
                SharedPreferences.Editor SharedPreferences.edit();
                    - Editor 객체를 획득한다.
                Editor.put(String key, String value)?
                    - key-value 형태로 데이터를 xml 파일에 저장한다.
                Editor.get(String key, String defaultValue)?
                    - key 의 값을 가져온다.
                Editor.commit()
                    - put 으로 저장한 데이터를 최종 반영한다.

        앱 설정 자동화?
            - 데이터의 저장과 데이터 저장을 위한 UI을 자동 구성해준다.
            PreferenceFragment 클래스를 활용해야 한다.
            설정 자동화를 위한 XML?
                <PreferenceScreen>?
                    - 설정 화면 단위, 중첩 가능하며 별도의 화면에 렌더링.
                    루트 태그이면서 중첩된 PreferenceScreen 은 별도의 화면에 렌드링 된다.
                <PreferenceCategory>
                    - 설정 여러 개를 시각적으로 묶음.
                    android:dependency?
                <CheckboxPreference>?
                    - 체크박스
                    android:summary?
                <SwitchPreference>?
                    - 스위치
                    android:summary?
                <EditTextPreference>?
                    - 글 입력 Dialog
                    android:dialogTitle?
                <ListPreference>?
                    - 항목 Dialog
                    android:entries?
                    android:entryValues?
                        배열 리소스?
                            - res/values 폴더의 XML 파일로써 <string-array> 태그를 사용해 선언한다.
                <MultiSelectListPreference>?
                    - 다중 항목 Checkbox
                    android:entries?
                    android:entryValues?
                <RingtonPreference>?
                    - 알람음 선택을 위한 설정
                <intent>?
                    android:targetPackage?
                    android:targetClass?
                공통 속성
                    android:key?
                        - SharedPreferences 의 key 값과 같은 역할을 한다.
                    android:title?
                        - 화면에 출력되는 제목
                    android:summary?
                        - 화면에 출력되는 부가 제목

            앱 설정 자동화 적용?
                - 작성한 XML 파일을 적용하려면 PreferenceFragment 클래스를 상속한 클래스를 정의해야 한다.
                PreferenceFragment?
                    PreferenceFragment.onCreate(final Bundle savedInstanceState)?
                        - 화면 출력 요청시 호출되는 함수
                    PreferenceFragment.addPreferencesFromResources(int prefResId)?
                        - 작성한 XML 파일을 적용하는 함수.
                    <fragment>?
                        - Activity 의 layout XML 에서 상속하여 정의한 PreferenceFragment 클래스를 등록
                        android:name?
                            - <fragment> 태그의 android:name 속성에 정의한 PreferenceFragment 의 fully-qualified 이름를 명시.
                SharedPreferences?
                    SharedPreferences.setSummary(String summary)?
                        - summary 속성의 값을 변경한다.
                    SharedPreferences.registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener)?
                        - 설정 내용을 변경할 때마다 발생하는 이벤트의 콜백.

